CREATE TABLE IF NOT EXISTS public.files (
    id bigint NOT NULL,
    md5sum text DEFAULT ''::text NOT NULL,
    "hasBeenTagged" boolean DEFAULT false NOT NULL,
    "storageID" uuid NOT NULL,
    "mimeType" text DEFAULT ''::text NOT NULL,
    "filename" text DEFAULT ''::text NOT NULL
);
COMMENT ON TABLE public.files IS 'All files uploaded to the database';

ALTER TABLE public.files ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.files_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY public.files
    ADD CONSTRAINT files_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.files
    ADD CONSTRAINT files_storageID_key UNIQUE ("storageID");
ALTER TABLE ONLY public.files
    ADD CONSTRAINT files_objects_fkey FOREIGN KEY ("storageID") REFERENCES storage.objects(id);
ALTER TABLE public.files ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all users to perform all operations" ON "files" AS PERMISSIVE FOR ALL TO "anon" USING (true) WITH CHECK (true);


CREATE TABLE IF NOT EXISTS "public"."tags" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null default ''::text,
    "description" text not null default ''::text
);

COMMENT ON TABLE public.tags IS 'All tags that can be used to categorize files';

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_name_key UNIQUE (name);
ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);
ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all users to perform all operations" ON "tags" AS PERMISSIVE FOR ALL TO "anon" USING (true) WITH CHECK (true);


CREATE TABLE IF NOT EXISTS  "public"."filetags" (
    "id" bigint generated by default as identity not null primary key,
    "fileid" bigint not null references public.files,
    "tagid" bigint not null references public.tags
);

COMMENT ON TABLE public.filetags IS 'All tags assigned to all files';
ALTER TABLE public.filetags ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all users to perform all operations" ON "filetags" AS PERMISSIVE FOR ALL TO "anon" USING (true) WITH CHECK (true);


CREATE TABLE IF NOT EXISTS  "public"."questions" (
    "id" bigint generated by default as identity not null,
    "orderingID" smallint not null default '0'::smallint,
    "questionText" text not null default ''::text,
    "mutuallyExclusive" boolean DEFAULT false NOT NULL
);

COMMENT ON TABLE public.questions IS 'All questions to ask to tag a file';

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_pkey PRIMARY KEY (id);
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all users to perform all operations" ON "questions" AS PERMISSIVE FOR ALL TO "anon" USING (true) WITH CHECK (true);


CREATE TABLE IF NOT EXISTS "public"."questionoptions" (
    "id" bigint generated by default as identity not null,
    "tagid" bigint,
    "questionid" bigint,
    "optiontext" text
);

COMMENT ON TABLE public.questionoptions IS 'All tag options for all questions';

ALTER TABLE ONLY public.questionoptions
    ADD CONSTRAINT questionoptions_pkey PRIMARY KEY (id);
ALTER TABLE ONLY public.questionoptions
    ADD CONSTRAINT questionoptions_questionid_fkey FOREIGN KEY (questionid) REFERENCES public.questions(id);
ALTER TABLE ONLY public.questionoptions
    ADD CONSTRAINT questionoptions_tagid_fkey FOREIGN KEY (tagid) REFERENCES public.tags(id);
ALTER TABLE public.questionoptions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all users to perform all operations" ON "questionoptions" AS PERMISSIVE FOR ALL TO "anon" USING (true) WITH CHECK (true);

INSERT INTO storage.buckets (id, name, public) VALUES ('files', 'files', true), ('thumbs', 'thumbs', true);
CREATE POLICY "Allow all users to perform all operations 1m0cqf_0" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'files');
CREATE POLICY "Allow all users to perform all operations 1m0cqf_1" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'files');
CREATE POLICY "Allow all users to perform all operations 1m0cqf_2" ON storage.objects FOR UPDATE TO anon WITH CHECK (bucket_id = 'files');
CREATE POLICY "Allow all users to perform all operations 1m0cqf_3" ON storage.objects FOR DELETE TO anon USING (bucket_id = 'files');
CREATE POLICY "Allow all users to perform all operations 1kkjs65_0" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'thumbs');
CREATE POLICY "Allow all users to perform all operations 1kkjs65_1" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'thumbs');
CREATE POLICY "Allow all users to perform all operations 1kkjs65_2" ON storage.objects FOR UPDATE TO anon WITH CHECK (bucket_id = 'thumbs');
CREATE POLICY "Allow all users to perform all operations 1kkjs65_3" ON storage.objects FOR DELETE TO anon USING (bucket_id = 'thumbs');

CREATE FUNCTION storage.update_files_referencing_storageid()
RETURNS trigger
LANGUAGE 'plpgsql'
COST 100
VOLATILE NOT LEAKPROOF
AS $BODY$BEGIN
IF NEW.bucket_id = 'files' THEN
UPDATE public.files SET "filename" = NEW.name WHERE "storageID" = NEW.id;
END IF;
RETURN NEW;
END;$BODY$;

CREATE TRIGGER update_files_table_when_storage_updates AFTER UPDATE OF name ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_files_referencing_storageid();